#!/bin/bash
# shellcheck disable=SC2206
# THIS FILE IS GENERATED BY AUTOMATION SCRIPT! PLEASE REFER TO ORIGINAL SCRIPT!
# THIS FILE IS A TEMPLATE AND IT SHOULD NOT BE DEPLOYED TO PRODUCTION!
#SBATCH --nodelist=mauao,ngongotaha
#SBATCH --gres=gpu:1
#SBATCH --job-name=job_name
#SBATCH --tasks-per-node=1
#SBATCH --cpus-per-task 8

# ===== DO NOT CHANGE THINGS HERE UNLESS YOU KNOW WHAT YOU ARE DOING =====
# This script is a modification to the implementation suggest by gregSchwartz18 here:
# https://github.com/ray-project/ray/issues/826#issuecomment-522116599
redis_password=$(uuidgen)
export redis_password

nodes=$(scontrol show hostnames "$SLURM_JOB_NODELIST") # Getting the node names
nodes_array=($nodes)

node_1=${nodes_array[0]}
ip=$(srun --nodes=1 --ntasks=1 -w "$node_1" hostname --ip-address) # making redis-address

# if we detect a space character in the head node IP, we'll
# convert it to an ipv4 address. This step is optional.
if [[ "$ip" == *" "* ]]; then
  IFS=' ' read -ra ADDR <<< "$ip"
  if [[ ${#ADDR[0]} -gt 16 ]]; then
    ip=${ADDR[1]}
  else
    ip=${ADDR[0]}
  fi
  echo "IPV6 address detected. We split the IPV4 address as $ip"
fi

# ===== Call your code below =====
# But you just need to ensure that only the node hosting the ray head runs python <your training script and args>

ip_head=$ip:$port
export ip_head
echo "IP Head: $ip_head"

# Load modules or your own conda environment here
# module load pytorch/v1.4.0-gpu
conda activate ${CONDA_ENV}

echo "STARTING HEAD at $node_1"
srun --nodes=1 --ntasks=1 -w "$node_1" \
    ray start --head --node-ip-address="$ip" --port=$port --redis-password="$redis_password" --num-cpus 8 --num-gpus 1 --include-dashboard=False --block &
head_pid="$!"
sleep 30

worker_num=$((SLURM_JOB_NUM_NODES - 1)) #number of nodes other than the head node
for ((i = 1; i <= worker_num; i++)); do
    node_i=${nodes_array[$i]}
    echo "STARTING WORKER $i at $node_i"
    srun --nodes=1 --ntasks=1 -w "$node_i" ray start --address "$ip_head" --redis-password="$redis_password" --num-cpus 8 --num-gpus 1 --block &
done

echo "LAUNCHING SIMULATION"
# ===== Launch the simulation script here =====
echo "WAITING FOR THE SIMULATION"
# python3 simulation.py
wait
sleep 30
